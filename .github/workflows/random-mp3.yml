name: Radio MP3 (unlimited + daily reset + versioned files + now/history)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [rotate]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages-radio"
  cancel-in-progress: true

jobs:
  rotate:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Reset l·ªãch s·ª≠ m·ªói 24h ---
      - name: Daily reset (clear play history every 24h)
        shell: bash
        run: |
          set -euo pipefail
          STATE=".radio_state.json"
          HIST=".radio_history.json"
          NOW=$(date +%s)
          [ -s "$STATE" ] || echo '{"last_reset":0}' > "$STATE"
          [ -s "$HIST"  ] || echo '[]' > "$HIST"
          LAST_RESET=$(jq -r '.last_reset // 0' "$STATE")
          if [ $((NOW - LAST_RESET)) -ge 86400 ]; then
            echo '[]' > "$HIST"
            jq --argjson now "$NOW" '.last_reset=$now' "$STATE" > "$STATE.tmp" && mv "$STATE.tmp" "$STATE"
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add "$STATE" "$HIST"
            git commit -m "radio: daily reset history" || true
            git push || true
          fi

      # --- Ch·ªçn b√†i (∆∞u ti√™n b√†i m·ªõi, tr√°nh l·∫∑p ngay) ---
      - name: Pick track (prefer NEW, avoid immediate repeat)
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          FILE="playlist.txt"
          [ ! -f "$FILE" ] && { echo "playlist.txt not found"; exit 1; }
          HIST=".radio_history.json"; [ -s "$HIST" ] || echo '[]' > "$HIST"
          LAST_URL=$(jq -r '.[-1].url // ""' "$HIST")
          mapfile -t LINES < <(grep -ve '^[[:space:]]*$' "$FILE")
          [ ${#LINES[@]} -lt 1 ] && { echo "playlist is empty"; exit 1; }

          get_url(){ echo "$1" | cut -d'|' -f1 | xargs; }
          get_dur(){ echo "$1" | cut -d'|' -f2 | xargs || true; }

          mapfile -t PLAYED < <(jq -r '.[].url' "$HIST")
          NEW_POOL=()
          for L in "${LINES[@]}"; do
            U=$(get_url "$L"); F=0
            for P in "${PLAYED[@]}"; do [ "$U" = "$P" ] && F=1 && break; done
            [ $F -eq 0 ] && NEW_POOL+=("$L")
          done

          choose(){
            local -a P=("$@"); local N=${#P[@]}
            [ $N -eq 0 ] && return 1
            if [ $N -gt 1 ] && [ -n "$LAST_URL" ]; then
              T=(); for L in "${P[@]}"; do [ "$(get_url "$L")" = "$LAST_URL" ] && continue; T+=("$L"); done
              [ ${#T[@]} -gt 0 ] && P=("${T[@]}"); N=${#P[@]}
            fi
            echo "${P[$((RANDOM%N))]}"
          }

          LINE=""
          [ ${#NEW_POOL[@]} -gt 0 ] && LINE="$(choose "${NEW_POOL[@]}")"
          [ -z "$LINE" ] && LINE="$(choose "${LINES[@]}")"
          [ -z "$LINE" ] && { echo "Cannot pick track"; exit 1; }

          URL=$(get_url "$LINE")
          DUR_RAW=$(get_dur "$LINE")

          to_sec(){
            local S="$1"; local DEF=180
            [ -z "$S" ] && { echo $DEF; return; }
            local H=$(echo "$S"|grep -oE '[0-9]+h'|tr -d h||echo 0)
            local M=$(echo "$S"|grep -oE '[0-9]+m'|tr -d m||echo 0)
            local X=$(echo "$S"|grep -oE '[0-9]+s'|tr -d s||echo 0)
            if [[ "$H" = 0 && "$M" = 0 && "$X" = 0 ]]; then echo "$S"; else echo $((H*3600+M*60+X)); fi
          }

          DURATION=$(to_sec "$DUR_RAW"); [ "$DURATION" -lt 30 ] && DURATION=30

          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "duration=$DURATION" >> "$GITHUB_OUTPUT"
          echo "dur_str=${DUR_RAW:-180s}" >> "$GITHUB_OUTPUT"

      # --- T·∫£i b√†i, l∆∞u filename theo th·ªùi gian + current.mp3, render index + now.json ---
      - name: Build site (versioned filename + stable current.mp3 + now.json)
        shell: bash
        run: |
          set -euo pipefail
          TS=$(date -u +%Y%m%d-%H%M%S)
          NEW="track-${TS}.mp3"
          mkdir -p public/f
          echo "Downloading to public/f/${NEW}"
          curl -L --fail --retry 3 "${{ steps.pick.outputs.url }}" -o "public/f/${NEW}"

          # Link ·ªïn ƒë·ªãnh cho nh√∫ng/IMVU
          cp -f "public/f/${NEW}" "public/f/current.mp3"

          # Gi·ªØ t·ªëi ƒëa 10 file version
          ls -1t public/f/track-*.mp3 2>/dev/null | awk 'NR>10' | xargs -r rm -f

          # Trang ch√≠nh
          cat > public/index.html <<HTML
          <!doctype html>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>musicbu radio</title>
          <h1>musicbu radio</h1>
          <p><b>Now playing</b>: <code>${NEW}</code> (${{
            steps.pick.outputs.dur_str
          }})</p>
          <p><a href="./f/current.mp3">üéµ Direct MP3 (stable)</a></p>
          <p><a href="./history.html">üìú History</a> ¬∑ <a href="./now.json">now.json</a> ¬∑ <a href="./history.json">history.json</a></p>
          <h3>Recent files</h3>
          <ul>
          $(for f in $(ls -1t public/f/track-*.mp3 2>/dev/null | head -10); do b=$(basename "$f"); echo "<li><a href=\"./f/$b\">$b</a></li>"; done)
          </ul>
          <style>
            body{font-family:system-ui,Segoe UI,Roboto,Arial;padding:24px;max-width:760px;margin:auto}
            code{background:#1113;border-radius:6px;padding:2px 6px}
            a{text-decoration:none}
          </style>
          HTML

          # now.json (API c√¥ng khai)
          BASE="/musicbu" # ƒë·ªïi n·∫øu repo kh√¥ng ph·∫£i musicbu
          cat > public/now.json <<JSON
          {
            "file": "${NEW}",
            "stable_url": "${BASE}/f/current.mp3",
            "source_url": "${{ steps.pick.outputs.url }}",
            "duration_seconds": ${{ steps.pick.outputs.duration }},
            "duration_str": "${{ steps.pick.outputs.dur_str }}",
            "started_at": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          }
          JSON

      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - uses: actions/deploy-pages@v4
        id: deploy

      # --- L∆∞u history (repo) v√† xu·∫•t public history.json + history.html ---
      - name: Update play history (repo + public JSON/HTML)
        shell: bash
        run: |
          set -euo pipefail
          U="${{ steps.pick.outputs.url }}"
          D="${{ steps.pick.outputs.duration }}"
          HIST=".radio_history.json"
          [ -s "$HIST" ] || echo '[]' > "$HIST"
          jq --arg url "$U" --arg dur "$D" --arg ts "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
             '. + [{"url":$url,"duration":($dur|tonumber),"ts":$ts}] | (length>200 ? .[length-200:] : .)' \
             "$HIST" > "$HIST.tmp" && mv "$HIST.tmp" "$HIST"

          # commit l·ªãch s·ª≠ trong repo (∆∞u ti√™n b√†i m·ªõi ho·∫°t ƒë·ªông)
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$HIST"
          git commit -m "Played $U" || true
          git push || true

          # xu·∫•t b·∫£n public/history.json + history.html
          mkdir -p public
          cp "$HIST" public/history.json
          cat > public/history.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>musicbu ‚Äì History</title>
          <h1>musicbu ‚Äì 50 recent plays</h1>
          <p><a href="./">‚Üê Back to Now Playing</a> ¬∑ <a href="./history.json">history.json</a></p>
          <table border="1" cellpadding="6" cellspacing="0">
            <thead><tr><th>#</th><th>Time (UTC)</th><th>Duration</th><th>Source URL</th></tr></thead>
            <tbody>
            <!-- rows injected by script -->
            </tbody>
          </table>
          <style>
            body{font-family:system-ui,Segoe UI,Roboto,Arial;padding:24px;max-width:1000px;margin:auto}
            table{border-collapse:collapse;width:100%}
            th,td{font-size:14px}
            a{text-decoration:none}
          </style>
          <script>
          fetch('./history.json').then(r=>r.json()).then(data=>{
            const last50 = data.slice(-50).reverse();
            const rows = last50.map((it,i)=>(
              `<tr><td>${i+1}</td><td>${it.ts}</td><td>${it.duration}s</td><td><a href="${it.url}" target="_blank">${it.url}</a></td></tr>`
            )).join('');
            document.querySelector('tbody').innerHTML = rows || '<tr><td colspan="4">No data</td></tr>';
          });
          </script>
          HTML

      - name: Upload updated now/history pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy updated now/history pages
        uses: actions/deploy-pages@v4

      # --- Ng·ªß ƒë√∫ng th·ªùi l∆∞·ª£ng r·ªìi t·ª± g·ªçi v√≤ng m·ªõi ---
      - name: Sleep until next track
        run: |
          echo "Sleeping ${{ steps.pick.outputs.duration }} seconds..."
          sleep ${{ steps.pick.outputs.duration }}

      - name: Continue next rotation
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -sSL -X POST \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${GH_REPO}/dispatches \
            -d '{"event_type":"rotate"}'
          echo "Looping next track..."
