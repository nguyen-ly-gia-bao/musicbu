name: Radio MP3 (unlimited + auto daily reset)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [rotate]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages-radio"
  cancel-in-progress: true

jobs:
  rotate:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Daily reset (clear play history every 24h)
        id: reset
        shell: bash
        run: |
          set -euo pipefail
          STATE=".radio_state.json"
          HIST=".radio_history.json"
          NOW=$(date +%s)

          # init files if missing
          [ -s "$STATE" ] || echo '{"last_reset":0}' > "$STATE"
          [ -s "$HIST" ]  || echo '[]' > "$HIST"

          LAST_RESET=$(jq -r '.last_reset // 0' "$STATE")
          ELAPSED=$(( NOW - LAST_RESET ))

          echo "Last reset at: $LAST_RESET, elapsed: ${ELAPSED}s"

          if [ "$ELAPSED" -ge 86400 ]; then
            echo "24h passed â†’ resetting play history."
            echo '[]' > "$HIST"
            jq --argjson now "$NOW" '.last_reset = $now' "$STATE" > "$STATE.tmp" && mv "$STATE.tmp" "$STATE"

            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add "$STATE" "$HIST"
            git commit -m "radio: daily reset history" || true
            git push || true
          fi

      - name: Pick track (prefer NEW, avoid immediate repeat)
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          FILE="playlist.txt"
          [ ! -f "$FILE" ] && echo "playlist.txt not found!" && exit 1

          HIST=".radio_history.json"
          [ -s "$HIST" ] || echo '[]' > "$HIST"
          LAST_URL=$(jq -r '.[-1].url // ""' "$HIST")

          mapfile -t LINES < <(grep -ve '^[[:space:]]*$' "$FILE")
          [ "${#LINES[@]}" -lt 1 ] && echo "playlist is empty" && exit 1

          get_url () { echo "$1" | cut -d'|' -f1 | xargs; }
          get_dur () { echo "$1" | cut -d'|' -f2 | xargs || true; }

          mapfile -t PLAYED < <(jq -r '.[].url' "$HIST")

          NEW_POOL=()
          for L in "${LINES[@]}"; do
            U="$(get_url "$L")"
            FOUND=0
            for P in "${PLAYED[@]}"; do [ "$U" = "$P" ] && FOUND=1 && break; done
            [ $FOUND -eq 0 ] && NEW_POOL+=("$L")
          done

          choose () {
            local -a POOL=("$@"); local N=${#POOL[@]}
            [ $N -eq 0 ] && return 1
            if [ $N -gt 1 ] && [ -n "$LAST_URL" ]; then
              TMP=()
              for L in "${POOL[@]}"; do [ "$(get_url "$L")" = "$LAST_URL" ] && continue; TMP+=("$L"); done
              [ ${#TMP[@]} -gt 0 ] && POOL=("${TMP[@]}")
              N=${#POOL[@]}
            fi
            echo "${POOL[$((RANDOM%N))]}"
          }

          LINE=""
          [ ${#NEW_POOL[@]} -gt 0 ] && LINE="$(choose "${NEW_POOL[@]}")"
          [ -z "$LINE" ] && LINE="$(choose "${LINES[@]}")"
          [ -z "$LINE" ] && { echo "Cannot pick track"; exit 1; }

          URL="$(get_url "$LINE")"
          DUR_RAW="$(get_dur "$LINE")"

          to_seconds () {
            local STR="$1"; local DEF="180"
            [ -z "$STR" ] && echo "$DEF" && return
            local H=$(echo "$STR" | grep -oE '[0-9]+h' | tr -d 'h' || echo 0)
            local M=$(echo "$STR" | grep -oE '[0-9]+m' | tr -d 'm' || echo 0)
            local S=$(echo "$STR" | grep -oE '[0-9]+s' | tr -d 's' || echo 0)
            if [[ "$H" == "0" && "$M" == "0" && "$S" == "0" ]]; then
              echo "$STR"; return
            fi
            echo $((H*3600 + M*60 + S))
          }

          DURATION=$(to_seconds "$DUR_RAW")
          [ "$DURATION" -lt 30 ] && DURATION=30

          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "duration=$DURATION" >> "$GITHUB_OUTPUT"
          echo "$URL" > .picked_url
          echo "$DURATION" > .picked_dur

      - name: Build site
        shell: bash
        run: |
          mkdir -p public/f
          curl -L --fail --retry 3 "${{ steps.pick.outputs.url }}" -o public/f/xz8cvuf.mp3
          cat > public/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>musicbu</title>
          <p>ðŸŽµ Direct MP3: <a href="./f/xz8cvuf.mp3">/f/xz8cvuf.mp3</a></p>
          HTML

      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - uses: actions/deploy-pages@v4
        id: deploy

      - name: Update play history
        shell: bash
        run: |
          U=$(cat .picked_url)
          D=$(cat .picked_dur)
          HIST=".radio_history.json"
          [ -s "$HIST" ] || echo '[]' > "$HIST"
          jq --arg url "$U" --arg dur "$D" --arg ts "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
             '. + [{"url":$url,"duration":($dur|tonumber),"ts":$ts}] | (length>200 ? .[length-200:] : .)' \
             "$HIST" > "$HIST.tmp" && mv "$HIST.tmp" "$HIST"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$HIST"
          git commit -m "Played $U" || true
          git push

      - name: Sleep until next track
        run: |
          echo "Sleeping ${{ steps.pick.outputs.duration }} seconds..."
          sleep ${{ steps.pick.outputs.duration }}

      - name: Continue next rotation
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -sSL -X POST \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${GH_REPO}/dispatches \
            -d '{"event_type":"rotate"}'
          echo "Looping next track..."
