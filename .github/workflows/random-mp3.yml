name: Random MP3 (continuous via self-dispatch)

on:
  # chạy tay để khởi động vòng đầu tiên
  workflow_dispatch:
    inputs:
      default_duration:
        description: "Giây mặc định nếu thiếu duration"
        required: false
        default: "180"
      min_sleep:
        description: "Ngủ tối thiểu giữa 2 lần deploy (giây)"
        required: false
        default: "30"
  # workflow tự gọi lại chính nó qua repository_dispatch
  repository_dispatch:
    types: [rotate]

permissions:
  contents: write        # để gọi repository_dispatch & đọc repo
  pages: write           # để deploy Pages (GitHub Actions source)
  id-token: write

concurrency:
  group: "pages-radio"
  cancel-in-progress: true

jobs:
  rotate:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pick random track from playlist
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          FILE="playlist.txt"
          [ ! -f "$FILE" ] && echo "playlist.txt not found!" && exit 1

          # bỏ dòng trống
          mapfile -t LINES < <(grep -cve '^[[:space:]]*$' "$FILE" >/dev/null; grep -ve '^[[:space:]]*$' "$FILE")
          [ "${#LINES[@]}" -lt 1 ] && echo "playlist is empty" && exit 1

          # random 1 dòng
          IDX=$(( RANDOM % ${#LINES[@]} ))
          LINE="${LINES[$IDX]}"

          URL="$(echo "$LINE" | cut -d'|' -f1 | xargs)"
          DUR_RAW="$(echo "$LINE" | cut -d'|' -f2 | xargs || true)"

          to_seconds () {
            local STR="$1"
            local DEF="${{ github.event.inputs.default_duration || '180' }}"
            [ -z "$STR" ] && echo "$DEF" && return 0
            local H=$(echo "$STR" | grep -oE '[0-9]+h' | tr -d 'h' || echo 0)
            local M=$(echo "$STR" | grep -oE '[0-9]+m' | tr -d 'm' || echo 0)
            local S=$(echo "$STR" | grep -oE '[0-9]+s' | tr -d 's' || echo 0)
            if [[ "$H" == "0" && "$M" == "0" && "$S" == "0" ]]; then
              if echo "$STR" | grep -qE '^[0-9]+$'; then echo "$STR"; return 0; fi
            fi
            echo $(( H*3600 + M*60 + S ))
          }

          DURATION=$(to_seconds "$DUR_RAW")
          MIN_SLEEP="${{ github.event.inputs.min_sleep || '30' }}"
          if [ "$DURATION" -lt "$MIN_SLEEP" ]; then DURATION="$MIN_SLEEP"; fi

          echo "Picked: $URL (duration=${DURATION}s)"
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "duration=$DURATION" >> "$GITHUB_OUTPUT"

      - name: Build site (download chosen mp3)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p public/f
          curl -L --fail --retry 3 "${{ steps.pick.outputs.url }}" -o public/f/xz8cvuf.mp3
          cat > public/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>musicbu</title>
          <p>Direct MP3: <a href="./f/xz8cvuf.mp3">/f/xz8cvuf.mp3</a></p>
          HTML

      - name: Upload artifact (Pages)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Sleep for track duration
        run: |
          echo "Sleeping ${{ steps.pick.outputs.duration }} seconds..."
          sleep ${{ steps.pick.outputs.duration }}

      - name: Trigger next rotation (self-dispatch)
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -sSL -X POST \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${GH_REPO}/dispatches \
            -d '{"event_type":"rotate"}'
          echo "Queued next rotation via repository_dispatch."
